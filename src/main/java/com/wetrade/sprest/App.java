/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.wetrade.sprest;

import java.nio.file.Path;
import java.nio.file.Paths;

import com.google.gson.Gson;
import com.wetrade.common.FabricProxyConfig;
import com.wetrade.common.FabricProxyException;
import com.wetrade.sprest.controllers.FinanceRequestController;
import com.wetrade.sprest.controllers.ShipmentController;
import com.wetrade.sprest.services.FinanceRequestService;
import com.wetrade.sprest.services.ShipmentService;
import com.wetrade.sprest.services.impl.FinanceRequestServiceImpl;
import com.wetrade.sprest.services.impl.ShipmentServiceImpl;
import com.wetrade.utils.BaseResponse;
import com.wetrade.utils.ResponseStatus;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

import spark.Spark;

public class App {
    public static void main(String[] args) {
    
        Options options = new Options();

        options.addRequiredOption("w", "wallet", true, "path to wallet");
        options.addRequiredOption("c", "connectionProfile", true, "path to connection profile");
        options.addRequiredOption("o", "org", true, "organisation ID");

        CommandLineParser clp = new DefaultParser();
        CommandLine cmd = null;

        try {
            cmd = clp.parse(options, args);
        } catch (ParseException e) {
            System.err.println("Failed to start SP REST. " + e.getMessage());
            System.exit(1);
		}

        Path walletPath = Paths.get(cmd.getOptionValue("w"));
        Path connectionProfilePath = Paths.get(cmd.getOptionValue("c"));

        String channelName = "mychannel";
        String contractName = "contract";
        String org = cmd.getOptionValue("o");

        FabricProxyConfig fpConfig = new FabricProxyConfig(walletPath, connectionProfilePath, channelName, contractName, org);

        FinanceRequestService financeRequestService = null;
        ShipmentService shipmentService = null;

        try {
            financeRequestService = new FinanceRequestServiceImpl(fpConfig);
            shipmentService = new ShipmentServiceImpl(fpConfig);
        } catch (FabricProxyException e) {
            System.err.println("Failed to start SP REST. " + e.getMessage());
            System.exit(1);
        }

        new FinanceRequestController(financeRequestService);
        new ShipmentController(shipmentService);

        Spark.internalServerError((req, res) -> {
            res.type("application/json");
            
            Gson gson = new Gson();
            return gson.toJson(new BaseResponse(ResponseStatus.ERROR));
        });
    }
}
